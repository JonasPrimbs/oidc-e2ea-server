openapi: 3.0.3
info:
  title: OIDCÂ² - Identity Certification Token Endpoint
  description: Endpoint for OpenID Connect's Identity Certification Token.
  version: 0.5.0
servers:
- url: http://op.localhost/realms/ict/protocol/openid-connect/ict
paths:
  /:
    post:
      summary: Request a new ICT
      description: Request a new Identity Certification Token
      operationId: genIct
      requestBody:
        description: Authenticate and send request parameters for a new Identity Certification Token.
        content:
          application/jwt:
            schema:
              $ref: '#/components/schemas/IdentityCertificationTokenRequestJwt'
        required: true
      responses:
        "201":
          description: |
            **Created**

            Returns the generated Identity Certification Token with additional information about it.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IctResponse'
        "401":
          description: |
            **Unauthorized**

            Possible reasons:
              - Access Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatus'
              examples:
                BearerAuthRequired:
                  summary: bearer authentication required
                  value:
                    code: 401
                    status: Unauthorized
                    description: bearer authentication required
        "403":
          description: |
            **Forbidden**

            Possible reasons:
              - Access Token not valid
              - Proof of Possession not valid
              - Proof of Possession not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatus'
              examples:
                AccessTokenInvalid:
                  summary: Access Token not valid for request
                  value:
                    code: 403
                    status: Forbidden
                    description: Access Token not valid
                PopInvalid:
                  summary: Proof of Possession not valid
                  value:
                    code: 403
                    status: Forbidden
                    description: Proof of Possession not valid
                PopMissing:
                  summary: Access Token not valid
                  value:
                    code: 403
                    status: Forbidden
                    description: Proof of Possession not found
        "404":
          description: |
            **Not Found**

            Possible reasons:
              - Requested required claims cannot be fulfilled
        "500":
          description: |
            **Internal Server Error**

            Possible reasons:
            - Connection to OpenID Provider or database failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatus'
              examples:
                Unknown:
                  summary: Unknown Server Error
                  value:
                    code: 500
                    status: Internal Server Error
                    description: Unknown Server Error.
      security:
      - oauth2_public:
        - openid
        - profile
        - email
      - oauth2_local:
        - openid
        - profile
        - email
    options:
      summary: Options for ICT
      description: Return Options for the Identity Certification Token Endpoint to avoid CORS errors.
      operationId: iatOptions
      responses:
        "204":
          description: |
            **No Content**
          headers:
            Allow:
              schema:
                type: array
                items:
                  type: string
              example: ["POST", "OPTIONS"]
            Access-Control-Allow-Origin:
              schema:
                type: string
              example: "*"
            Access-Control-Request-Method:
              schema:
                type: string
              example: "POST"
            Access-Control-Request-Headers:
              schema:
                type: array
                items:
                  type: string
              example: ["Authorization", "Content-Type"]
components:
  schemas:
    ErrorStatus:
      required:
      - code
      - status
      type: object
      properties:
        code:
          type: integer
          description: Status Code
          format: int
          minimum: 100
          maximum: 599
        status:
          type: string
          description: Status Text
        description:
          type: string
          description: More detailed description
      description: Information about ocurred error.
    IdentityCertificationTokenRequestJwt:
      type: string
      description: |
        A JSON Web Token (JWT) which MUST
          - be signed with an asymmetric algorithm (`ES256`, `ES384`, `ES512`, `RS256`, `RS384`, `RS512`, `PS256`, `PS384`, `PS512`, or `EdDSA` allowed).
          - have the type `"typ": "jwt+pop"` in the header.
          - contain the client's public key in the JWT header (`"jwk": <public-key>`).
          - be issued by the client (`"iss": "<client-id>"`).
          - have the OpenID Provider as audience (`"aud": "<op-issuer-url>"`).
          - have the requesting End-User's ID as subject (`"sub": "<user-id>"`).
          - have an issued at date (`"iat": <issuance-time>`).
          - have an expiration date (`"exp": <expiration-time>`).
          - be valid for at most 300 seconds (= 5 minutes) (`"exp"` minus `"nbf"` or `"iat"` is less or equal `300`).
          - contain a JWT ID (`"jti": "<random string>"`) that is unique for the combination of iss, aud and sub within its validity period.
          - be signed with the client's private key
      format: jwt
      example: eyJhbGciOiJFUzM4NCIsInR5cCI6Imp3dCtwb3AiLCJqd2siOnsia3R5IjoiRUMiLCJjcnYiOiJQLTM4NCIsIngiOiItOExuNUoyamlHOVI2WXBvcFp6ay1DY0dvRFhqdGR2ZDE2cUJUd0E0RktydFdCcmxoZ3c3ZnloMG1HdnhoY2xWIiwieSI6IlFrRV9JajJINm5Db085V0dxQXRBVEVOM29uX0JpbHlOY2w1dUgzWmtfT0ZhNHF6dWRDbWlXUzEwVElHVnVTNVAifX0.eyJpc3MiOiJleGFtcGxlY2xpZW50Iiwic3ViIjoiMTIzNDU2Nzg5MCIsImF1ZCI6Imh0dHBzOi8vb3AuZXhhbXBsZS5jb20iLCJpYXQiOjE2OTE3MTIwMDAsIm5iZiI6MTY5MTcxMjAwMCwiZXhwIjoxNjkxNzEyMDYwLCJqdGkiOiJkNl9wdFptWjhsYVg0REtvV1hEMDhvWlg1eW8iLCJyZXF1aXJlZF9jbGFpbXMiOlsibmFtZSJdLCJvcHRpb25hbF9jbGFpbXMiOlsiZW1haWwiLCJwaG9uZV9udW1iZXIiXSwid2l0aF9hdWRpZW5jZSI6dHJ1ZX0.LnFFlhhZipPm0FFt8eUQff5cVAoPRnxa0udNRicjXMZDewMGbXF0q5J2j2XBfAoem0cm8twTFnf56x1iraqr8bpe17U6yp_B-s9YZmUTne-Bd3AHhGgisKpVCubMz_jD
    IctResponse:
      required:
      - identity_certification_token
      - expires_in
      - claims
      - e2e_auth_contexts
      type: object
      properties:
        identity_certification_token:
          $ref: '#/components/schemas/IdentityCertificationToken'
        e2e_auth_contexts:
          type: array
          description: Array of authorized end-to-end authentication contexts.
          example: [email instant_messaging]
          items:
            type: string
        expires_in:
          type: integer
          description: Number of seconds until the Identity Certification Token expires.
          format: int32
          minimum: 0
          maximum: 3600
          example: 300
        claims:
          type: array
          description: Array of claims provided in the Identity Certification Token.
          example: 
            - sub
            - name
            - email
            - email_verified
          items:
            type: string
      example:
        claims: sub name email email_verified
        identity_certification_token: eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCtEUE9QIiwia2lkIjoxfQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmV4YW1wbGUub3JnLyIsInN1YiI6ImpvaG4uc21pdGhAYWNjb3VudHMuZXhhbXBsZS5vcmciLCJpYXQiOjE2NTkzNTUyMDUsIm5iZiI6MTY1OTM1NTIwNSwiZXhwIjoxNjU5MzU4ODA1LCJub25jZSI6IlZqZlU0Nlo1eWtJaG43akp6cVpvV0srcGFxNjNFS3VIIiwiY25mIjp7Imp3ayI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6ImNYUThiZGVOZWVTd2ZMa0h6TWZBVUZySGxMWFpXdkpybW9NMnNDUEdVbmciLCJ5IjoiN0Rwd21Pb0hJbmQwUWNSRVJUS1pBQ2k5YndzYTVnR0tER3hGeG00OEdSQSJ9fSwibmFtZSI6IkpvaG4gU21pdGgiLCJlbWFpbCI6ImpvaG4uc21pdGhAbWFpbC5zYW1wbGUub3JnIiwiZW1haWxfdmVyaWZpZWQiOnRydWV9.TEIehA9Xzmo72QoWMTwlkHA2FzypvGq8mAnGyJLD7H3TAYodrMzJnqyTaU7N36Qij2w5-8IpoPIzahGoKC6J_w
        expires_in: 3600
    IdentityCertificationToken:
      type: string
      description: |
        **Identity Certification Token** as `jwt+ict` which MUST
          - contain a JWK Key ID of the OpenID Provider's key pair which is used for signing this token (`"kid": <key-id>`) in the JWT header
          - be issued by the OpenID Provider (`"iss": "<op-id>"`)
          - have an issued at date (`"iat": <issuance-time>`)
          - have an expiration date (`"exp": <expiration-time>`)
          - be valid for at most 24 hours (`"exp"` minus `"nbf"` or `"iss"` is less or equal `86400`)
          - contain a unique nonce (`"nonce": "<random string>"`). If provided in the request, this MUST be the `token_nonce`.
          - contain the client's public key as confirmation claim (`"cnf": { "jwk": <public-key> }`)
          - contain the requested claims (e.g., `"name": "<full-name>"`, `"email": "<email-address>"`, ...), but only if they are covered by the scopes of the provided Access Token
          - be signed with the OpenID Provider's private key
      format: jwt+ict
      example: eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCtEUE9QIiwia2lkIjoxfQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmV4YW1wbGUub3JnLyIsInN1YiI6ImpvaG4uc21pdGhAYWNjb3VudHMuZXhhbXBsZS5vcmciLCJpYXQiOjE2NTkzNTUyMDUsIm5iZiI6MTY1OTM1NTIwNSwiZXhwIjoxNjU5MzU4ODA1LCJub25jZSI6IlZqZlU0Nlo1eWtJaG43akp6cVpvV0srcGFxNjNFS3VIIiwiY25mIjp7Imp3ayI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6ImNYUThiZGVOZWVTd2ZMa0h6TWZBVUZySGxMWFpXdkpybW9NMnNDUEdVbmciLCJ5IjoiN0Rwd21Pb0hJbmQwUWNSRVJUS1pBQ2k5YndzYTVnR0tER3hGeG00OEdSQSJ9fSwibmFtZSI6IkpvaG4gU21pdGgiLCJlbWFpbCI6ImpvaG4uc21pdGhAbWFpbC5zYW1wbGUub3JnIiwiZW1haWxfdmVyaWZpZWQiOnRydWV9.TEIehA9Xzmo72QoWMTwlkHA2FzypvGq8mAnGyJLD7H3TAYodrMzJnqyTaU7N36Qij2w5-8IpoPIzahGoKC6J_w
    JwkPublicKey:
      oneOf:
        - $ref: '#/components/schemas/JwkEcPublicKey'
        - $ref: '#/components/schemas/JwkRsaPublicKey'
        - $ref: '#/components/schemas/JwkEdPublicKey'
    JwkEcPublicKey:
      type: object
      required:
        - kty
        - crv
        - x
        - y
      properties:
        kty:
          type: string
          enum:
            - "EC"
        crv:
          $ref: '#/components/schemas/EcCurve'
          examples:
            p256:
              value: "P-256"
            p384:
              value: "P-384"
            p521:
              value: "P-521"
        x:
          type: string
          format: byte
        y:
          type: string
          format: byte
    JwkRsaPublicKey:
      type: object
      required:
        - kty
        - n
        - e
      properties:
        kty:
          type: string
          enum:
            - "RSA"
        n:
          type: string
          format: byte
        e:
          type: string
          format: byte
    JwkEdPublicKey:
      type: object
      required:
        - kty
        - crv
        - x
      properties:
        kty:
          type: string
          enum:
            - "OKP"
        crv:
          $ref: '#/components/schemas/EcCurve'
          example: "Ed25519"
        x:
          type: string
          format: byte
    AppConfiguration:
      type: object
      required:
        - keyFilePath
        - keyId
        - signingAlgorithm
        - userinfoEndpoint
        - issuer
        - defaultTokenPeriod
        - maxTokenPeriod
      properties:
        keyFile:
          type: string
          format: uri
        keyId:
          type: string
        signingAlgorithm:
          $ref: '#/components/schemas/SigningAlgorithm'
        userinfoEndpoint:
          type: string
          format: uri
        issuer:
          type: string
          format: uri
        defaultTokenPeriod:
          type: integer
          format: uint32
          minimum: 0
          maximum: 2592000
        maxTokenPeriod:
          type: integer
          format: uint32
          minimum: 0
          maximum: 2592000
    EcCurve:
      type: string
      enum:
        - "P-256"
        - "P-384"
        - "P-521"
    EdCurve:
      type: string
      enum:
        - "Ed25519"
    SigningAlgorithm:
      oneOf:
        - $ref: '#/components/schemas/EcSigningAlgorithm'
        - $ref: '#/components/schemas/RsaSigningAlgorithm'
        - $ref: '#/components/schemas/EdSigningAlgorithm'
    EcSigningAlgorithm:
      type: string
      enum:
        - "ES256"
        - "ES384"
        - "ES512"
    RsaSigningAlgorithm:
      type: string
      enum:
        - "RS256"
        - "RS384"
        - "RS512"
    EdSigningAlgorithm:
      type: string
      enum:
        - "EdDSA"
    KeyType:
      type: string
      enum:
        - "EC"
        - "RSA"
        - "OKP"
  securitySchemes:
    oauth2_public:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://op.oidc-e2e.primbs.dev/realms/ict/protocol/openid-connect/auth
          tokenUrl: https://op.oidc-e2e.primbs.dev/realms/ict/protocol/openid-connect/token
          scopes:
            openid: |
              **General OpenID Connect authorization**
            profile: |
              **OpenID Connect profile information**

              Authorizes access to the following profile claims:
                - `name`
                - `family_name`
                - `given_name`
                - `middle_name`
                - `nickname`
                - `preferred_username`
                - `profile`
                - `picture`
                - `website`
                - `gender`
                - `birthdate`
                - `zoneinfo`
                - `locale`
                - `updated_at`
            email: |
              **OpenID Connect email address information**

              Authorizes access to the following profile claims:
                - `email`
                - `email_verified`
    oauth2_local:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://op.localhost/realms/ict/protocol/openid-connect/auth
          tokenUrl: http://op.localhost/realms/ict/protocol/openid-connect/token
          scopes:
            openid: |
              **General OpenID Connect authorization**
            profile: |
              **OpenID Connect profile information**

              Authorizes access to the following profile claims:
                - `name`
                - `family_name`
                - `given_name`
                - `middle_name`
                - `nickname`
                - `preferred_username`
                - `profile`
                - `picture`
                - `website`
                - `gender`
                - `birthdate`
                - `zoneinfo`
                - `locale`
                - `updated_at`
            email: |
              **OpenID Connect email address information**

              Authorizes access to the following profile claims:
                - `email`
                - `email_verified`
